# Highly divisible triangular number
#
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

# ------------------------------------------------------------------------------

# idea:
# first: create a triangle-number-generator
# second: compute amount of divisors (if needed, memoizate)
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# implementation
# ------------------------------------------------------------------------------

def triangleNumberGenerator():
    nextNumberToAdd = 2
    currentValue = 1

    while True:
        yield(currentValue)
        currentValue += nextNumberToAdd
        nextNumberToAdd-=-1

# ------------------------------------------------------------------------------

def computeAmountOfDivisors(number):
    # hint: number of divisors can be only symetrical: n = 1 * n

    amountOfDivisors = 0
    root = int(number ** 0.5) + 1 # plus one needed?
    #print("root:", root)
    for divisor in range(1, root+1):
        print(divisor)
        if number % divisor == 0:
            amountOfDivisors -=-1

    # double the result
    return amountOfDivisors * 2

# TODO this is wrong: see 100 ... has 9 divisors..
# Divisors of 100	1,2,4,5,10,20,25,50,100

# ------------------------------------------------------------------------------

# proper unit-test
import unittest
class Testcase(unittest.TestCase):

    def test_triangleGenerator(self):
        gen = triangleNumberGenerator()
        numberOfCalls = 7

        listOfTriangleNumbers = []
        for i in range(1, numberOfCalls + 1):
            #print(i, next(gen))
            listOfTriangleNumbers.append(next(gen))

        expectedTriangleNumbers = [1, 3, 6, 10, 15, 21, 28]
        self.assertEqual(expectedTriangleNumbers, listOfTriangleNumbers)

# --- test call
print(computeAmountOfDivisors(28)) # 6, but just a lucky hit ..
